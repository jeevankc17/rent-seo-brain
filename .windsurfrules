Instructions for Implementing Mobile-First Tailwind CSS

The Problem (What I Did Wrong)
The previous approach used desktop-sized styles (like fixed widths and large fonts) as the default. This broke the mobile layout because those styles were forced onto small screens.

The Solution: Mobile-First Design
Refactor the code so that:

Default Classes are for Mobile: Classes without a prefix define the layout on the smallest screens (~320px).

Prefixed Classes are for Overrides: Use sm:, md:, and lg: to override mobile styles on larger screens. Our main desktop design is under the lg: prefix.

The Breakpoints to Use:

Default: Mobile phones (0px and up)

sm:: 640px and up

md:: 768px and up

lg:: 1024px and up (Desktop Target)

How to Fix the Existing Code:
Find all desktop-specific styles and move them to lg: overrides. Provide a mobile-friendly default first.

Key Things to Change (Detailed):

Typography & Sizing: This is the most critical change. Follow this precise scaling for all text classes.

On Mobile (default): Use the smallest practical size.

text-5xl → text-xl (48px → 20px)

text-4xl → text-lg (36px → 18px)

text-3xl → text-base (30px → 16px)

text-2xl → text-sm (24px → 14px)

text-xl → text-xs (20px → 12px)

text-base, text-sm, text-xs → keep as-is

On sm: screens (≥640px): Scale up slightly.

text-5xl → text-2xl (48px → 24px)

text-4xl → text-xl (36px → 20px)

text-3xl → text-lg (30px → 18px)

text-2xl → text-base (24px → 16px)

text-xl → text-sm (20px → 14px)

On md: screens (≥768px): Scale up again.

text-5xl → text-3xl (48px → 30px)

text-4xl → text-2xl (36px → 24px)

text-3xl → text-xl (30px → 20px)

text-2xl → text-lg (24px → 18px)

text-xl → text-base (20px → 16px)

On lg: screens (≥1024px): Apply the original desktop size.

Use the original class: text-5xl, text-4xl, text-3xl, text-2xl, text-xl

Example Refactor: class="text-3xl" becomes class="text-base md:text-xl lg:text-3xl"

Widths & Heights:

Change fixed widths: w-[1128px] → w-full lg:w-[1128px]

Change fixed heights: h-[456px] → h-auto lg:h-[456px] (or a smaller mobile height like h-32)

Layouts & Flexbox:

Change horizontal desktop layouts to vertical mobile layouts: flex-row → flex-col lg:flex-row

Adjust grid columns for mobile: grid-cols-4 → grid-cols-1 md:grid-cols-2 lg:grid-cols-4

Spacing (Padding/Margin):

Reduce large spacing for mobile: p-12 → p-4 lg:p-12

m-16 → m-4 lg:m-16

Visibility:

Hide elements on mobile if necessary: hidden lg:block (hidden on mobile, shown on desktop)

block lg:hidden (shown on mobile, hidden on desktop)

Final Instruction for the AI:
Analyze the provided HTML and Tailwind CSS code. Refactor it to be strictly mobile-first. For every element, especially those with typography:

Apply the specific mobile text size mapping from the guide above as the default.

Use the sm:, md:, and lg: prefixes to scale the text up according to the provided mapping, ensuring the original lg: size is the desktop target.

Apply the same principle to widths, layouts, and spacing: mobile-default first, with lg: overrides for the original desktop styles.

Only add sm: and md: breakpoints where a change is necessary between mobile and desktop.

The goal is a seamless experience: functional and attractive on mobile, scaling perfectly to the desktop design at 1024px.

`Also donot try to change the layout design for the desktop view, where incase of other screen sizes and below sm too follow the responsive common guideliness and accordingly hug content to the container.`